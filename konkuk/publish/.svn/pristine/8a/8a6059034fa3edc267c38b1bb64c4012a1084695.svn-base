<!DOCTYPE HTML>
<html lang="ko">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width,user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,target-densitydpi=medium-dpi">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta property="og:title" content="건국대학교 졸업생 취업진로현황 분석시스템">
	<meta property="og:site_name" content="건국대학교 졸업생 취업진로현황 분석시스템">
	<meta property="og:type" content="website">
	<meta property="og:url" content="http://kustat.njob.co.kr">
	<meta property="og:image" content="images/common/og_image.png">
	<meta property="og:image:width" content="400">
	<meta property="og:image:height" content="210">
	<meta property="og:description" content="건국대학교 졸업생 취업진로현황 분석시스템">
	<meta name="description" content="건국대학교 졸업생 취업진로현황 분석시스템">
	<title>건국대학교 졸업생 취업진로현황 분석시스템</title>
	<link rel="canonical" href="http://kustat.njob.co.kr">
	<link rel="shortcut icon" href="images/common/favicon.ico">
	<link rel="apple-touch-icon-precomposed" href="images/favicon/favicon.png">
	<link rel="stylesheet" href="lib/css/common.css">
	<script type="text/javascript" src="lib/js/jquery-1.11.0.min.js"></script>
	<script type="text/javascript" src="lib/js/Chart.min.js"></script>
	<script type="text/javascript" src="lib/js/common.js"></script>
</head>
<body class="bg_popup">
	<!-- 최근 3년간 경쟁대학 계열별 취업률 비교 팝업 -->
	<div class="popup_wrap">
		<h1>건국대학교 졸업생 취업진로현황 분석시스템</h1>
		<h2>본교 취업률 항목별 분석</h2>
		<h3>최근 3년간 경쟁대학 취업률 비교</h3>
		<canvas id="threeYearsRivalDepartmentChart"></canvas>
		<div class="btn_wrap">
			<button type="button" class="save_pdf">PDF로 저장</button>
			<button type="button" class="btn_closed">닫기</button>
		</div>
	</div>
	<!-- /최근 3년간 경쟁대학 계열별 취업률 비교 팝업 -->
	<script type="text/javascript">
	//정렬 세팅
	const CHART = document.getElementById("threeYearsRivalDepartmentChart");

	Chart.plugins.register({
	  beforeUpdate: function(chart) {
		if (chart.options.sort) {
		  let dataArray = chart.data.datasets[2].data.slice();
		  let dataIndexes = dataArray.map((d, i) => i);
		  dataIndexes.sort((a, b) => {
			return dataArray[a] - dataArray[b];
		  });

		  // sort data array as well
		  dataArray.sort((a, b) => b - a);

		  // At this point dataIndexes is sorted by value of the data, so we know how the indexes map to each other
		  let meta = chart.getDatasetMeta(2);
		  let newMeta = [];
		  let labels = chart.data.labels;
		  let newLabels = [];
		  
		  meta.data.forEach((a, i) => {
			newMeta[dataIndexes[i]] = a;
			newLabels[dataIndexes[i]] = chart.data.labels[i];
		  });

		  meta.data = newMeta;
		  chart.data.datasets[2].data = dataArray;
		  chart.data.labels = newLabels;
		}
	  }
	});

	//최근 3년간 경쟁대학 계열별 취업률 비교 차트
	var threeYearsRivalDepartmentChart = document.getElementById("threeYearsRivalDepartmentChart");
	var myChart = new Chart(threeYearsRivalDepartmentChart, {
		type: 'bar',
		data: {
			labels: ["한국외국어대학교", "건국대학교", "동국대학교", "서울시립대학교", "아주대학교", "인하대학교", "중앙대학교", "경희대학교", "한양대학교", "성균관대학교", "숙명여자대학교", "성신여자대학교", "상명대학교", "고려대학교", "서강대학교"],
			datasets: [{
				label: '2015년',
				data: [51.8, 47.5, 49.1, 33.3, 70, 51.8, 47.5, 49.1, 33.3, 70, 51.8, 47.5, 49.1, 33.3, 70],
				backgroundColor: [
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)',
					'rgba(75, 192, 192, 0.2)'
				],
				borderColor: [
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)',
					'rgba(75, 192, 192, 1)'
				],
				borderWidth: 1
			}, {
				label: '2016년',
				data: [51.8, 47.5, 49.1, 33.3, 70, 51.8, 47.5, 49.1, 33.3, 70, 51.8, 47.5, 49.1, 33.3, 70],
				backgroundColor: [
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(54, 162, 235, 0.2)',
				],
				borderColor: [
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(54, 162, 235, 1)',
				],
				borderWidth: 1
			}, {
				label: '2017년',
				data: [51.8, 47.5, 49.1, 33.3, 70, 51.8, 47.5, 49.1, 33.3, 70, 51.8, 47.5, 49.1, 33.3, 70],
				backgroundColor: [
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
					'rgba(116, 210, 72, 0.2)',
				],
				borderColor: [
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
					'rgba(116, 210, 72, 1)',
				],
				borderWidth: 1
			}]
		},
		options: {
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero:true,
						max: 100
					}
				}],
				xAxes: [{
					ticks: {
						autoSkip: false
					}
				}]
			},
			hover: {
				animationDuration: 0
			}
		}
	});
	//rotate
	Chart.plugins.register({
	  afterDatasetsDraw: function(context, easing) {
		var ctx = context.chart.ctx;
		context.data.datasets.forEach(function (dataset) {
		  for (var i = 0; i < dataset.data.length; i++) {
			if (dataset.data[i] != 0) {
			  var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;
			  var textY = model.y + (dataset.type == "line" ? 15 : -20);

			  ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, 'normal', Chart.defaults.global.defaultFontFamily);
			  ctx.textAlign = 'center';
			  ctx.textBaseline = 'bottom';
			  ctx.fillStyle = dataset.type == "line" ? "white" : "black";

			  // By saving the context, we can undo the transformation using restore() so
			  // so that the change does not affect other parts of the rendering code
			  ctx.save();
			  
			  // By translating the canvas so that 0,0 is where we want to draw the text before
			  // the rotation is applied we don't need to worry about the coordinate system rotation 
			  ctx.translate(model.x + 5, textY);

			  // Now we rotate the canvas rendering by a certain amount of degrees so that
			  // the text draws at an angle. For simplicity I hard-coded the angle at 45 degrees.
			  // You could write a block of code that only rotates if the text is long.
			  ctx.rotate(-45);
			  var percent = String(Math.round(dataset.data[i]).toFixed(1)) + "%";
			  // Now we actually draw the text. Since we used ctx.translate() we draw at (0, 0) here.
			  ctx.fillText(percent, 0, 0);

			  // This undoes the translate() and rotate() so everything is back to the way it was when save()
			  // was last called.
			  ctx.restore();
			}
		  }
		});
	  }
	});
	//정렬
	myChart.options.sort = true;
	myChart.update();
	myChart.options.sort = false;

	</script>
</body>
</html>


<!-- this.data.datasets.forEach(function (dataset) {
	for (var i = 0; i < dataset.data.length; i++) {
		var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;
		var percent = String(Math.round(dataset.data[i]).toFixed(1)) + "%";
		ctx.fillText(percent, model.x + 20, model.y + 5);
	}
}); -->